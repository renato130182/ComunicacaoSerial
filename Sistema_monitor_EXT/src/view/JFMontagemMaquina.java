/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ControllerEngenharia;
import controller.ControllerEngenhariaAlternativa;
import controller.ControllerEventosSistema;
import controller.ControllerItem;
import controller.ControllerProducao;
import controller.ControllerReservaMaquina;
import controller.LogErro;
import dao.PesagemDAO;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.HeadlessException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import model.Item;
import model.Pesagem;
import model.Produto;
import model.ProgramacaoMaquina;
import model.ReservaMaquina;

/**
 *
 * @author renato.soares
 */
public class JFMontagemMaquina extends javax.swing.JFrame {
    private final CanvasCarretelEntrada carEntrada;
    private final CanvasCarretelEntrada carSaida;
    private final CanvasBigBag pvc;   
    private final CanvasBigBag CoPvc; 
    private String comando="";
    private ProgramacaoMaquina prog;
    private List<ReservaMaquina> resMaq;
    private boolean carretelTrocado=false;
    private String pesEntrada="",pesSaida="";
    private final LogErro erro = new LogErro();

    public void setProg(ProgramacaoMaquina prog) {
        this.prog = prog;
        jTAProdutoSaida.setText("Codigo: " + prog.getProduto().item.getCodigo() +
                "\n " + prog.getProduto().item.getDescricao() + " \n Lote: " +
                prog.getLoteproducao());
        verificarEngenhariaReservaMaquina();
    }
    /**
     * Creates new form JFMontagemMaquina
     * @param codigoMaquina
     */
    public JFMontagemMaquina(String codigoMaquina) {
        initComponents();
        prog = new ProgramacaoMaquina();
        carEntrada = new CanvasCarretelEntrada();        
        carSaida = new CanvasCarretelEntrada(); 
        resMaq = new ArrayList<>();
        jPanelCarEntrada.add(carEntrada);
        jPanelCarSaida.add(carSaida);
        pvc = new CanvasBigBag();
        CoPvc = new CanvasBigBag();
        jPanelExtPrincipal.add(pvc);
        jPanelCoExt.add(CoPvc);                        
        CardLayout card = (CardLayout) root.getLayout();
        card.show(root,"jPanel1");
        buscaReservaMaquina(codigoMaquina);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        root = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanelCarEntrada = new javax.swing.JPanel();
        jPanelExtPrincipal = new javax.swing.JPanel();
        jPanelCoExt = new javax.swing.JPanel();
        jPanelCarSaida = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTAPvcExtrusado = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTAProdutoSaida = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTACoExtrusaoPigmento = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTACarretelEntrada = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Montagem de MÃ¡quina");
        setAlwaysOnTop(true);
        setExtendedState(JFMontagemMaquina.MAXIMIZED_BOTH);
        setType(java.awt.Window.Type.UTILITY);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        root.setLayout(new java.awt.CardLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanelCarEntrada.setToolTipText("Carretel de entrada");
        jPanelCarEntrada.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanelCarEntrada.setEnabled(false);
        jPanelCarEntrada.setLayout(new java.awt.BorderLayout());

        jPanelExtPrincipal.setEnabled(false);
        jPanelExtPrincipal.setLayout(new java.awt.BorderLayout());

        jPanelCoExt.setEnabled(false);
        jPanelCoExt.setLayout(new java.awt.BorderLayout());

        jPanelCarSaida.setEnabled(false);
        jPanelCarSaida.setLayout(new java.awt.BorderLayout());

        jTAPvcExtrusado.setColumns(20);
        jTAPvcExtrusado.setRows(5);
        jTAPvcExtrusado.setBorder(javax.swing.BorderFactory.createTitledBorder("Extrusora Principal"));
        jTAPvcExtrusado.setFocusable(false);
        jTAPvcExtrusado.setPreferredSize(new java.awt.Dimension(190, 115));
        jScrollPane2.setViewportView(jTAPvcExtrusado);

        jTAProdutoSaida.setColumns(20);
        jTAProdutoSaida.setRows(5);
        jTAProdutoSaida.setBorder(javax.swing.BorderFactory.createTitledBorder("Produto"));
        jTAProdutoSaida.setFocusable(false);
        jScrollPane3.setViewportView(jTAProdutoSaida);

        jTACoExtrusaoPigmento.setColumns(20);
        jTACoExtrusaoPigmento.setRows(5);
        jTACoExtrusaoPigmento.setBorder(javax.swing.BorderFactory.createTitledBorder("Co-Extrusora "));
        jTACoExtrusaoPigmento.setFocusable(false);
        jScrollPane4.setViewportView(jTACoExtrusaoPigmento);

        jTACarretelEntrada.setColumns(20);
        jTACarretelEntrada.setRows(5);
        jTACarretelEntrada.setBorder(javax.swing.BorderFactory.createTitledBorder("Carretel Entrada"));
        jTACarretelEntrada.setFocusable(false);
        jScrollPane5.setViewportView(jTACarretelEntrada);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelCarEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanelCoExt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanelExtPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(jPanelCarSaida, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanelCarSaida, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanelCarEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanelExtPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelCoExt, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4))
                .addContainerGap(233, Short.MAX_VALUE))
        );

        root.add(jPanel1, "card2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(root, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(root, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        //System.out.println("key pressed");
        try {                    
            if(evt.getKeyCode()!=16) {
                if(evt.getKeyCode()!=10){
                    comando = comando + String.valueOf(evt.getKeyChar());               
                }else{                
    //                System.out.println("KeyChar: " + evt.getKeyChar());
    //                System.out.println("KeyCode: " + evt.getKeyCode());                
                    if(comando.length()==10){
                        System.out.println("Materia prima: " + comando);
                        comandoTrocaMateriaPrima(comando);                
                    }
                    else{
                        if(comando.length()>0 && comando.length()<10){
                            System.out.println("Pesagem : " + comando);
                            //comandoTrocaCarretelEntrada(Integer.valueOf(comando));
                            comandoTrocaCarretelMontagem(Integer.valueOf(comando));  
                        }else{
                            JOptionPane.showMessageDialog(root,"Lote "+comando+" invÃ¡lido para a montagem \n" +
                                    "Pro favor verifique e tente novamente","Lote nÃ£o encontrado",JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    comando="";
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
            erro.gravaErro(e);
            comando="";
        }
    }//GEN-LAST:event_formKeyPressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        encerrarMontagem();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
        encerrarMontagem();
    }//GEN-LAST:event_formWindowIconified

    private void encerrarMontagem(){
        Object[] opcao = {"Sim","NÃ£o"};
        try {
            int r = JOptionPane.showOptionDialog(root,"Deseja realizar a troca do lote atual para "
                    + prog.getLoteproducao() , "Montagem de maquina",JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,null, opcao,opcao[0]);
            if(r == JOptionPane.YES_OPTION){
                atualizarReservaNovoLote();
                if(verificarEngenhariaReservaMaquina()){
                    if(carretelTrocado){
                        ControllerEventosSistema ctr = new ControllerEventosSistema();
                        ctr.verificaPreApontamento("2",resMaq.get(0).getCodigoMaquina(),
                                "Troca na Montagem",true,Integer.valueOf(pesSaida)
                                ,Integer.valueOf(pesEntrada));
                    }
                    ControllerReservaMaquina ctrRes = new ControllerReservaMaquina(); 
                    ControllerEventosSistema ctrEvt = new ControllerEventosSistema();
                    ctrEvt.atualizaLoteUltimoEventoLogin(prog.getLoteproducao());
                    if(ctrRes.AtualizaMontagemMaquina(resMaq)){
                       this.dispose();
                    }
                }
            }else{
                this.dispose();
            }
        } catch (HeadlessException e) {
            e.printStackTrace();
            erro.gravaErro(e);
        }
    }
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(JFMontagemMaquina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(JFMontagemMaquina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(JFMontagemMaquina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(JFMontagemMaquina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new JFMontagemMaquina().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelCarEntrada;
    private javax.swing.JPanel jPanelCarSaida;
    private javax.swing.JPanel jPanelCoExt;
    private javax.swing.JPanel jPanelExtPrincipal;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTACarretelEntrada;
    private javax.swing.JTextArea jTACoExtrusaoPigmento;
    private javax.swing.JTextArea jTAProdutoSaida;
    private javax.swing.JTextArea jTAPvcExtrusado;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel root;
    // End of variables declaration//GEN-END:variables

    private boolean buscaReservaMaquina(String codigoMaquina) {
        try {
            ControllerReservaMaquina res = new ControllerReservaMaquina();
            resMaq = res.buscaListaReservaMaquina(codigoMaquina);
            if(resMaq!=null){
                preenchedadosExtrusoraPrincipal();
                preencheDadosCoExtrusora();
                preencheDadosCarretelEntrada();
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            erro.gravaErro(e);
        }
        JOptionPane.showMessageDialog(root, "NÃ£o foi possivel buscar dados da montagem da maquina."
                + "\nPor favor verifique e tente novamente."
                + "\nSe o problema persistir procure o setor de informÃ¡tica.","Falha ao buscar a montagem",JOptionPane.ERROR_MESSAGE);
        return false;
    }

    private void preenchedadosExtrusoraPrincipal() {       
        ControllerItem ctr = new ControllerItem();
        Item pvc = new Item();
        for(ReservaMaquina r : resMaq){
            if(r.getTipoExtrusao().trim().equals("1")){
                pvc = ctr.BuscaDadosItem(Long.valueOf(r.getCodItemRes()));                
                jTAPvcExtrusado.setText("Codigo Item: " + r.getCodItemRes()+
                        "\n" + pvc.getDescricao() + 
                        "\nLote Interno: " + r.getLoteItemRes() +
                        "\nSaldo: " + r.getQuantItemRes());                
            }
        }
    }

    private void preencheDadosCoExtrusora() {
        String dados ="";
        ControllerItem ctr = new ControllerItem();
        Item pvcPig = new Item();
        
        for(ReservaMaquina r : resMaq){
            if(r.getTipoExtrusao().trim().equals("2") || r.getCodItemRes().trim().substring(0,4).equals("2003")){
                pvcPig = ctr.BuscaDadosItem(Long.valueOf(r.getCodItemRes()));
                dados = dados + "Codigo Item: " + r.getCodItemRes() +
                        "\n" + pvcPig.getDescricao() +
                        "\nLote Interno: " + r.getLoteItemRes()+
                        "\nSaldo: " + r.getQuantItemRes()+
                        "\n";
            }
        }
        jTACoExtrusaoPigmento.setText(dados);
    }

    private void preencheDadosCarretelEntrada() {
        Pesagem pes = new Pesagem();        
        ControllerProducao ctr = new ControllerProducao();        
        for(ReservaMaquina r : resMaq){
            if(r.getPesagem()!=0){
                pes = ctr.BuscaDadosProducaoPesagem(r.getPesagem());
                jTACarretelEntrada.setText("Numero pesagem: " + r.getPesagem()+
                        "\nCodigo Item: " + pes.getCodItem()+
                        "\n" + pes.getDecItem()+
                        "\nLote: " + pes.getLote() +
                        "\nSaldo: " + pes.getSaldoConsumo());                                   
            }
        }
    }
    private void comandoTrocaCarretelMontagem(int pesagem){
        long codReservaMaquina = 0;
        String codItem="";
        for(ReservaMaquina r : resMaq){
            if(r.getPesagem()==pesagem){
                codReservaMaquina=r.getcodigoReserva();
                codItem=r.getCodItemRes();
                break;
            }
        }
        if(codReservaMaquina!=0){
            jTACarretelEntrada.setBackground(Color.red);
            PesagemDAO dao = new PesagemDAO();                  
            String novaPesagem = JOptionPane.showInputDialog(root,"Informe o numero da nova pesagem!");
            if(novaPesagem==null || novaPesagem.isEmpty()){    
                jTACarretelEntrada.setBackground(Color.WHITE);
                return;
            }
            Pesagem pesEntrando = new Pesagem();
            pesEntrando = dao.buscaPesagemCodigo(novaPesagem);
            if(pesEntrando!=null){
                if(validaEngenharia(new Item(Long.valueOf(pesEntrando.getCodItem()))) ||
                        validaEngenhariaAlternativa(new Item(Long.valueOf(pesEntrando.getCodItem())),4)){
                    if(atualizaReservaMaquinaPesagem(codReservaMaquina,pesEntrando)){
                        jTACarretelEntrada.setBackground(Color.green);
                        preencheDadosCarretelEntrada();
                    }else{
                        JOptionPane.showMessageDialog(root,"Falha ao registrar item para atualizaÃ§Ã£o da montagem da maquina"
                            + "\nPor favor tente novamente."
                            + "\nSe o problema persistir procure o setor de informatica.","Falha ao atualizar lista de montagem da maquina",
                            JOptionPane.ERROR_MESSAGE);
                    jTACarretelEntrada.setBackground(Color.yellow);
                    }
                }else{
                    JOptionPane.showMessageDialog(root,"O item escolhido nÃ£o corresponde a engenharia de produto"
                            + "\nPor favor informe ao setor de engenharia de produÃ§Ã£o"
                            + "\nSe o problema persistir procure o setor de informatica.","Enenharia de ProduÃ§Ã£o incorreta",JOptionPane.ERROR_MESSAGE);
                    jTACarretelEntrada.setBackground(Color.yellow);
                }
            }else{
                JOptionPane.showMessageDialog(root,"Numero da pesagem nÃ£o encontrada nos registros de produÃ§Ã£o. "
                    + "\nPor favor verifique e tente novamente","Numero da Pesagem nÃ£o encontrada",JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(root,"Numero da pesagem nÃ£o encontrada na montagem da maquina. "
                    + "\nPor favor verifique e tente novamente","Numero da Pesagem nÃ£o encontrada",JOptionPane.ERROR_MESSAGE);
        }
    }
    private void comandoTrocaMateriaPrima(String lote) {
        long codReservaMaquina=0;
        String tipoExtrusao="";
        long codigoItem=0;
        for(ReservaMaquina r : resMaq){
            if(r.getLoteItemRes().equals(lote)){
                codReservaMaquina = r.getCodigoReserva();
                tipoExtrusao = r.getTipoExtrusao();
                codigoItem = Long.valueOf(r.getCodItemRes());
                break;
            }                    
        }
        if(codReservaMaquina!=0){
            if(tipoExtrusao.equals("1")){
                jTAPvcExtrusado.setBackground(Color.red);
                String novoLote = JOptionPane.showInputDialog(root,"Informe o novo lote de matÃ©ria prima");
                if(novoLote==null || novoLote.isEmpty()){
                    jTAPvcExtrusado.setBackground(Color.WHITE);
                    return;
                }
                ControllerReservaMaquina ctrItem = new ControllerReservaMaquina();
                Item itemEntrando = new Item();
                itemEntrando = ctrItem.buscaItemMateriaPrima(novoLote);
                if(itemEntrando==null){
                    JOptionPane.showMessageDialog(root,"NÃ£o foi possivel buscar o item do lote da matÃ©ria prima digitada"
                            + "\nPor favor tente novamente."
                            + "\nSe o problema persistir procure o setor de informatica.","Falha ao busca item",JOptionPane.ERROR_MESSAGE);
                    jTAPvcExtrusado.setBackground(Color.yellow);
                    return;
                }
                
                if(validaEngenharia(itemEntrando) ||
                        validaEngenhariaAlternativa(itemEntrando,1)){
                    if(atualizaReservaMaquina(codReservaMaquina,String.valueOf(itemEntrando.getCodigo()),novoLote)){
                        jTAPvcExtrusado.setBackground(Color.green);
                        preenchedadosExtrusoraPrincipal();
                    }else{
                        JOptionPane.showMessageDialog(root,"Falha ao registrar item para atualizaÃ§Ã£o da montagem da maquina"
                            + "\nPor favor tente novamente."
                            + "\nSe o problema persistir procure o setor de informatica.","Falha ao atualizar lista de montagem da maquina",
                            JOptionPane.ERROR_MESSAGE);
                    jTAPvcExtrusado.setBackground(Color.yellow);
                    }
                }else{
                    JOptionPane.showMessageDialog(root,"O item escolhido nÃ£o corresponde a engenharia de produto"
                            + "\nPor favor informe ao setor de engenharia de produÃ§Ã£o"
                            + "\nSe o problema persistir procure o setor de informatica.","Enenharia de ProduÃ§Ã£o incorreta",JOptionPane.ERROR_MESSAGE);
                    jTAPvcExtrusado.setBackground(Color.yellow);
                }
            }else{
                jTACoExtrusaoPigmento.setBackground(Color.red);
                String novoLote = JOptionPane.showInputDialog(root,"Informe o novo lote de matÃ©ria prima");
                if(novoLote==null || novoLote.isEmpty()){
                    jTACoExtrusaoPigmento.setBackground(Color.WHITE);
                    return;
                }
                ControllerReservaMaquina ctrItem = new ControllerReservaMaquina();
                Item itemEntrando = new Item();
                itemEntrando = ctrItem.buscaItemMateriaPrima(novoLote);
                if(itemEntrando==null){
                    JOptionPane.showMessageDialog(root,"NÃ£o foi possivel buscar o item do lote da matÃ©ria prima digitada"
                            + "\nPor favor tente novamente."
                            + "\nSe o problema persistir procure o setor de informatica.","Falha ao busca item",JOptionPane.ERROR_MESSAGE);
                    jTACoExtrusaoPigmento.setBackground(Color.yellow);
                    return;
                }
                int tipo;
                if("2002".equals(String.valueOf(codigoItem).substring(4))){
                    tipo=2;
                }else{
                    tipo=3;
                }
                if(validaEngenharia(itemEntrando) ||
                        validaEngenhariaAlternativa(itemEntrando,tipo)){
                    if(atualizaReservaMaquina(codReservaMaquina,String.valueOf(itemEntrando.getCodigo()),novoLote)){
                        jTACoExtrusaoPigmento.setBackground(Color.green);
                        preencheDadosCoExtrusora();
                    }else{
                        JOptionPane.showMessageDialog(root,"Falha ao registrar item para atualizaÃ§Ã£o da montagem da maquina"
                            + "\nPor favor tente novamente."
                            + "\nSe o problema persistir procure o setor de informatica.","Falha ao atualizar lista de montagem da maquina",
                            JOptionPane.ERROR_MESSAGE);
                    jTACoExtrusaoPigmento.setBackground(Color.yellow);
                    }
                }else{
                    JOptionPane.showMessageDialog(root,"O item escolhido nÃ£o corresponde a engenharia de produto"
                            + "\nPor favor informe ao setor de engenharia de produÃ§Ã£o"
                            + "\nSe o problema persistir procure o setor de informatica.","Enenharia de ProduÃ§Ã£o incorreta",JOptionPane.ERROR_MESSAGE);
                    jTACoExtrusaoPigmento.setBackground(Color.yellow);
                }
            }
        }else{
            JOptionPane.showMessageDialog(root,"Lote interno nÃ£o encontrado na montagem da maquina. "
                    + "\nPor favor verifique e tente novamente","Lote Interno nÃ£o encontrado",JOptionPane.ERROR_MESSAGE);
        }
    }

    private void comandoTrocaCarretelEntrada(long pesagem) {
        long codReservaMquina=0;                        
        for(ReservaMaquina r : resMaq){
            if(r.getPesagem()==pesagem){
                codReservaMquina = r.getCodigoReserva(); 
                jTACarretelEntrada.setBackground(Color.red);
                Pesagem pesMontada = new Pesagem();
                PesagemDAO dao = new PesagemDAO();                
                //pesEntrada = dao.buscaPesagemCodigo(jTFNumeroPesagem.getText());
                pesMontada = dao.buscaPesagemCodigo(String.valueOf(pesagem));
                JFDTrocaCarretelEntrada trc = new JFDTrocaCarretelEntrada(this,true);
                trc.setMontagem(true);
                trc.setPesSaida(pesMontada);
                trc.setMetragem(0);
                trc.setCodMaquina(resMaq.get(0).getCodigoMaquina());
                trc.setLote(prog.getLoteproducao());
                trc.buscaItensAlternativosMontagem(String.valueOf(prog.getProduto().item.getCodigo()));
                trc.setVisible(true);
                if(trc.getReturnStatus()==1){
                    codReservaMquina = r.getCodigoReserva(); 
                    r.setLoteItemRes(trc.getPesEntrada().getLote());
                    r.setQtosFios(trc.getPesEntrada().getQtosFios());
                    r.setCodigoembalagem(trc.getPesEntrada().getCodEmbalagem());
                    r.setCodItemRes(trc.getPesEntrada().getCodItem());
                    r.setQuantItemRes(trc.getPesEntrada().getSaldoConsumo());
                    r.setPesagem(Integer.valueOf(trc.getPesEntrada().getCodigo()));
                    preencheDadosCarretelEntrada();
                    carretelTrocado = true;
                    pesEntrada = pesMontada.getCodigo();
                    pesSaida = trc.getPesEntrada().getCodigo();                    
                    jTACarretelEntrada.setBackground(Color.green);
                }else{
                    jTACarretelEntrada.setBackground(Color.yellow);
                }
                break;
            }                    
        }        
    if(codReservaMquina==0){                                            
        JOptionPane.showMessageDialog(root,"Numero da pesagem nÃ£o encontrada na montagem da maquina."
                + "\nPor fvor verifique e tente novamente","Numero pesagem nÃ£o encontrada",JOptionPane.ERROR_MESSAGE);
        }       
                
    }

    private boolean validaEngenhariaAlternativa(Item itemEntrando,int tipoItem) {
        String itemPadrao="";
        List<Produto> prods = new ArrayList<>();
        ControllerEngenhariaAlternativa eng = new ControllerEngenhariaAlternativa();
            switch (tipoItem){
                case 1: //Extrusora Principal
                    itemPadrao = eng.buscaCodigoItemPVCExtrusadoPadrao
                            (prog.getProduto().item.getCodigo());
                    if(!itemPadrao.equals(""))prods = eng.buscaListaAlternativas(itemPadrao,
                            String.valueOf(prog.getProduto().item.getCodigo()));
                    break;
                case 2: // Co-Extrusora 
                    itemPadrao = eng.buscaCodigoItemPVC_CoExtrusadoPadrao
                            (prog.getProduto().item.getCodigo());
                    if(!itemPadrao.equals(""))prods = eng.buscaListaAlternativas(itemPadrao,
                            String.valueOf(prog.getProduto().item.getCodigo()));
                    break;
                case 3: //Pigmento
                    itemPadrao = eng.buscaCodigoItemPigmentoPadrao
                            (prog.getProduto().item.getCodigo());
                    if(!itemPadrao.equals(""))prods = eng.buscaListaAlternativas(itemPadrao,
                            String.valueOf(prog.getProduto().item.getCodigo()));
                    break;
                case 4: // cobre
                    itemPadrao = eng.buscaItemCobrePadrao(
                            (String.valueOf(prog.getProduto().item.getCodigo())));
                    if(!itemPadrao.equals(""))prods = eng.buscaListaAlternativas(itemPadrao,
                            String.valueOf(prog.getProduto().item.getCodigo()));
                    break;
                default:
                    System.out.println("Tipo InvÃ¡lido");
                    prods=null;
                    break;
            }            
            if(prods!=null){
                for(Produto p : prods){
                    if(p.item.getCodigo()==itemEntrando.getCodigo()){
                        return true;
                    }
                }
            }
        return false;
    }

    private boolean atualizaReservaMaquina(long codReservaMaquina,String codItementrando, 
            String lote) {
        ControllerReservaMaquina ctr = new ControllerReservaMaquina();
        try {
            for(ReservaMaquina r : resMaq){
                if(r.getCodigoReserva()==codReservaMaquina){
                    r.setCodItemRes(codItementrando);
                    r.setLoteItemRes(lote);
                    r.setQuantItemRes(ctr.buscaSaldoCansumoMP(lote));
                    return true;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            erro.gravaErro(e);
        }
        return false;
    }

    private boolean validaEngenharia(Item itemEntrando) {
        ControllerEngenharia ctr = new ControllerEngenharia();        
        return ctr.validaEngenhariaPorItem(itemEntrando.getCodigo(),prog.getProduto().item.getCodigo());            
    }

    private boolean verificarEngenhariaReservaMaquina() {
        boolean extrusora=false,coExtrusora=false,pigmento=false,cobre=false;
        if(resMaq!=null){
            try {
                for(ReservaMaquina r : resMaq){                    
                    if("1".equals(r.getTipoExtrusao())){
                        extrusora=validaEngenharia(new Item(Long.valueOf(r.getCodItemRes()))) ||
                        validaEngenhariaAlternativa(new Item(Long.valueOf(r.getCodItemRes()))
                            ,1);                            
                    }
                    if("2".equals(r.getTipoExtrusao())){
                        coExtrusora=validaEngenharia(new Item(Long.valueOf(r.getCodItemRes()))) ||
                        validaEngenhariaAlternativa(new Item(Long.valueOf(r.getCodItemRes()))
                            ,2);
                    }
                    if("2003".equals(r.getCodItemRes().substring(0,4))){
                        pigmento =validaEngenharia(new Item(Long.valueOf(r.getCodItemRes()))) ||
                        validaEngenhariaAlternativa(new Item(Long.valueOf(r.getCodItemRes()))
                            ,3);
                    }
                    if("40".equals(r.getCodItemRes().substring(0,2))){
                        cobre =validaEngenharia(new Item(Long.valueOf(r.getCodItemRes()))) ||
                        validaEngenhariaAlternativa(new Item(Long.valueOf(r.getCodItemRes()))
                            ,4);
                    }
                }                
                if(!extrusora){
                    jTAPvcExtrusado.setBackground(Color.red);
                }
                if(!coExtrusora || !pigmento){
                    jTACoExtrusaoPigmento.setBackground(Color.red);
                }
                if(!cobre){
                    jTACarretelEntrada.setBackground(Color.red);
                }
            } catch (NumberFormatException e) {
                e.printStackTrace();
                erro.gravaErro(e);
            }
        }
    return extrusora && coExtrusora && pigmento && cobre;
    }    
    private void atualizarReservaNovoLote() {
        for(ReservaMaquina r : resMaq){
            r.setCodItemProd(String.valueOf(prog.getProduto().item.getCodigo()));
            r.setLoteProducao(prog.getLoteproducao());            
        }
    }

    private boolean atualizaReservaMaquinaPesagem(long codReservaMaquina, Pesagem pesEntrando) {
        try {
            for(ReservaMaquina r : resMaq){
                if(codReservaMaquina==r.getCodigoReserva()){
                    r.setLoteItemRes(pesEntrando.getLote());
                    r.setQtosFios(pesEntrando.getQtosFios());
                    r.setCodigoembalagem(pesEntrando.getCodEmbalagem());
                    r.setCodItemRes(pesEntrando.getCodItem());
                    r.setQuantItemRes(pesEntrando.getSaldoConsumo());
                    r.setPesagem(Integer.valueOf(pesEntrando.getCodigo()));
                    return true;
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
            erro.gravaErro(e);
        }
        return false;
    }
}
